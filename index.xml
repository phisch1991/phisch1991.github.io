<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Philipp&#39;s blog about it</title>
    <link>https://phisch1991.github.io/</link>
    <description>Recent content on Philipp&#39;s blog about it</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>phisch1991</copyright>
    <lastBuildDate>Thu, 07 Jan 2021 18:00:00 +0100</lastBuildDate><atom:link href="https://phisch1991.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About</title>
      <link>https://phisch1991.github.io/page/about/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:00 +0100</pubDate>
      
      <guid>https://phisch1991.github.io/page/about/</guid>
      <description>About me I studied business information technology and IT management and work in IT for about an decade now. I love the DevOps approach (vs. separation of development and operations) and thinking in products (vs. thinking in projects). And I am interested in security related topics.
Why do I do this? I am always willing to learn new cool stuff and share it with others. I like writing and explaining things to IT and non-IT people.</description>
    </item>
    
    <item>
      <title>Graphics in your documentation</title>
      <link>https://phisch1991.github.io/tools/drawio/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:00 +0100</pubDate>
      
      <guid>https://phisch1991.github.io/tools/drawio/</guid>
      <description>The problem A long time during my career we did not find a good solution for managing diagrams/figures within Markdown or AsciiDoc documentation. We had a source file (e. g. a Microsoft Visio file) and then rendered a pixel file which was included into the documentation. The challenges we had include:
 The application required to modify the source file was not installed (due to cost saving, licensing or carelessness) The source file was on somebody elses computer and he/she did not upload it, so we either had to wait or (in the worst case) create the file again.</description>
    </item>
    
    <item>
      <title>Secrets as code</title>
      <link>https://phisch1991.github.io/security/secrets-as-code/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:00 +0100</pubDate>
      
      <guid>https://phisch1991.github.io/security/secrets-as-code/</guid>
      <description>Introduction One of the most challenging parts when running applications is how to handle secrets properly. Besides central key management tools such as Hashicorp Vault another approach has evolved: Handling secrets as code and manage them with the rest of your source code - encrypted of course. There are many tools supporting this way of working, such as Mozilla SOPS, kubesec and others.
How does it work? To answer these questions, we need to know two things about these tools:</description>
    </item>
    
    <item>
      <title>Social Login</title>
      <link>https://phisch1991.github.io/muggles/social-login/</link>
      <pubDate>Thu, 07 Jan 2021 18:00:00 +0100</pubDate>
      
      <guid>https://phisch1991.github.io/muggles/social-login/</guid>
      <description>Before we start Have you ever used - or at least seen - the button Login with Facebook on a new web application you wanted to use? I guess for most non-IT people it is quite mysterious what happens if you click this button: You are suddenly logged in, the website knows your name and e-mail address and you don&amp;rsquo;t even have to set another password for the new website.</description>
    </item>
    
  </channel>
</rss>
